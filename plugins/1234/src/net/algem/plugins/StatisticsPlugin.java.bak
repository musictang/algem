/*
 * @(#)StatisticsPlugin.java	2.8.v 26/06/14
 *
 * Copyright (c) 1999-2014 Musiques Tangentes. All Rights Reserved.
 *
 */
package net.algem.plugins;

import java.io.IOException;
import java.sql.SQLException;
import net.algem.edition.Statistics;
import net.algem.edition.StatisticsDefault;
import net.algem.edition.StatisticsFactory;
import net.algem.planning.DateFr;
import net.algem.planning.Schedule;
import net.algem.room.Establishment;
import net.algem.util.DataCache;
import net.algem.util.DataConnection;
import net.algem.util.GemLogger;
import net.algem.util.MessageUtil;

/**
 * Statistics file export for Musiques Tangentes.
 * For Algem >= 2.8.v
 *
 * @author <a href="mailto:jmg@musiques-tangentes.asso.fr">Jean-Marc Gobat</a>
 * @version 2.8.v
 * @since 2.6.g 20/11/12
 */
public class StatisticsPlugin
        extends Statistics
{

  private static final int PRO_MEMBER_ACCOUNT = 14;
  private static final int STUDIO = 8;

  public StatisticsPlugin() {
  }

  @Override
  public void makeStats() throws SQLException {
    super.makeStats();
    separate();
    out.println("<h2>©  STATISTIQUES PERSONNALISÉES  ©</h2>");
    separate();
    printIntListResult("Payeurs sans adresse", getQuery("payers_without_address"));
    printIntListResult("Adhérents débiteurs", getQuery("debtors"));
    separate();
    
    printTitle("Nombre d'adhérents");
    out.println("\n\t\t<table>");
    out.println("\n\t\t<tr><th>Hommes</th><td>" + getIntResult(getQuery("number_of_men_members")) + "</td></tr>");
    out.println("\n\t\t<tr><th>Femmes</th><td>" + getIntResult(getQuery("number_of_women_members")) + "</td></tr>");
    out.println("\n\t\t<tr><th>Total</th><td>" + getIntResult(getQuery("total_number_of_members")) + "</td></tr>");  
    out.println("\n\t\t</table>");

    printTableIntResult("Répartition des élèves en cours individuels", getQuery("students_by_instrument", false, 0));
    if (estabList.size() > 1) {
      for (Establishment e : estabList) {
        printTableIntResult("Répartition des élèves en cours individuels sur " + e.getName(), getQuery("students_by_instrument", false, e.getId()));    
      }
    }

    separate();
    printTableIntResult("Répartition des élèves en cours collectifs", getQuery("students_by_instrument", true, 0));
    for (Establishment e : estabList) {
      printTableIntResult("Répartition des élèves en cours collectifs sur " + e.getName(), getQuery("students_by_instrument", true, e.getId()));   
    }

    separate();
    printTableIntResult("Répartition des adhérents par catégorie professionnelle", getQuery("members_by_occupational"));
    
    separate();
    printTableIntResult("Situation géographique des adhérents", getQuery("members_by_location"));
    
    separate();
    printTitle("Nombre d'heures de cours (heures élèves loisir et pro)");
    String nb_hours_individual = getStringResult(getQuery("hours_of_private_lessons", null, null));   
    String nb_hours_collective = getStringResult(getQuery("hours_of_collective_lessons", null, null));

    out.print("\n\t\t<table class='list'>");
    out.print("\n\t\t\t<tr><td>&nbsp;</td>");
    for (Establishment e : estabList) {
      out.print("<th>" + e.getName() + "</th>");
      
    }

    out.print("<th>Total</th></tr>\n\t\t\t<tr><th>Cours individuels</th>");
    for (Establishment e : estabList) {
      String r1 = getStringResult(getQuery("hours_of_private_lessons", null, e.getId()));
      out.print("<td>" + parseTimeResult(r1) + "</td>");   
    }

    out.print("<td>" + parseTimeResult(nb_hours_individual) + "</td></tr>\n\t\t\t<tr><th>Cours collectifs</th>");
    for (Establishment e : estabList) {
      String r2 = getStringResult(getQuery("hours_of_collective_lessons", null, e.getId()));
      out.print("<td>" + parseTimeResult(r2) + "</td>"); 
    }
    out.print("<td>" + parseTimeResult(nb_hours_collective) + "</td></tr>");
    
    int hi = getMinutesFromString(nb_hours_individual);
    int hc = getMinutesFromString(nb_hours_collective);
    out.print("\n\t\t\t<tr><td colspan = '" + (estabList.size() + 2) + "'>" + getTimeFromMinutes(hi + hc) + "</td></tr>\n\t\t</table>");

    printTitle("Nombre d'heures Loisir");
    String hl1 = getStringResult(getQuery("hours_of_lessons", false, 'L'));
    String hl2 = getStringResult(getQuery("hours_of_lessons", true, 'L'));
    String hl3 = getStringResult(getQuery("hours_of_teacher_lessons", true, 'L'));
    
    int htl1 = getMinutesFromString(hl1);
    int htl2 = getMinutesFromString(hl2);
    int htl3 = getMinutesFromString(hl3);

    out.print("\n\t\t<table class='list'>");
    out.print("\n\t\t\t<tr><td>&nbsp;</td><th>Heures élèves</th><th>Heures profs</th></tr>");
    out.print("\n\t\t\t<tr><th>Cours individuels</th><td>" + parseTimeResult(hl1) + "</td><td>" + parseTimeResult(hl1) + "</td></tr>");
    out.print("\n\t\t\t<tr><th>Cours collectifs</th><td>" + parseTimeResult(hl2) + "</td><td>" + parseTimeResult(hl3) + "</td></tr>");
    out.print("\n\t\t\t<tr><th>Total</th><td>" + getTimeFromMinutes(htl1 + htl2) + "</td><td>" + getTimeFromMinutes(htl1 + htl3) + "</td></tr>");
    out.println("\n\t\t</table>");

    printTitle("Nombre d'heures For Pro");
    String hp1 = getStringResult(getQuery("hours_of_lessons", false, 'P'));
    String hp2 = getStringResult(getQuery("hours_of_lessons", true, 'P'));
    String hp3 = getStringResult(getQuery("hours_of_teacher_lessons", true, 'P'));
    
    int htp1 = getMinutesFromString(hp1);
    int htp2 = getMinutesFromString(hp2);
    int htp3 = getMinutesFromString(hp3);
    
    out.print("\n\t\t<table class='list'>");
    out.print("\n\t\t\t<tr><td>&nbsp;</td><th>Heures élèves</th><th>Heures profs</th></tr>");
    out.print("\n\t\t\t<tr><th>Cours individuels</th><td>" + parseTimeResult(hp1) + "</td><td>" + parseTimeResult(hp1) + "</td></tr>");
    out.print("\n\t\t\t<tr><th>Cours collectifs</th><td>" + parseTimeResult(hp2) + "</td><td>" + parseTimeResult(hp3) + "</td></tr>");
    out.print("\n\t\t\t<tr><th>Total</th><td>" + getTimeFromMinutes(htp1 + htp2) + "</td><td>" + getTimeFromMinutes(htp1 + htp3) + "</td></tr>");
    out.println("\n\t\t</table>");

    printTableTimeResult("Nombre d'heures (élèves) de cours particuliers par instrument", getQuery("hours_of_private_lessons_by_activity", null, null));
    for (Establishment e : estabList) {
      printTableTimeResult("Nombre d'heures (élèves) de cours particuliers par instrument sur " + e.getName(), getQuery("hours_of_private_lessons_by_activity", null, e.getId()));
    }

    printTableTimeResult("Nombre d'heures (élèves) de cours collectifs par activité", getQuery("hours_of_collective_lessons_by_activity", null, null));
    if (estabList.size() > 1) {
      for (Establishment e : estabList) {
        printTableTimeResult("Nombre d'heures (élèves) de cours collectifs par activité sur " + e.getName(), getQuery("hours_of_collective_lessons_by_activity", null, e.getId()));
      }
    }

    printIntResult("Nombre de classes extérieur", getQuery("number_of_external_classrooms"));
    printTimeResult("Nombre d'heures extérieur", getQuery("external_hours"));

    if (start.afterOrEqual(new DateFr("01-09-2014"))) {
      printTimeResult("Nombre d'heures studio", getQuery("total_hours_of_studio"));
      printTableTimeResult(MessageUtil.getMessage("statistics.hours.of.studio.by.type"), getQuery("hours_of_studio_by_type"));     
    } else {
      printTimeResult("Nombre d'heures studio", getQuery("hours_of_studio"));
    }
    printTimeResult(MessageUtil.getMessage("statistics.hours.of.training"), getQuery("hours_of_training"));
    footer();
  }

  @Override
  public void setSummaryDetail(StringBuilder summary) {
    addEntry(summary, MessageUtil.getMessage("statistics.members.without.date.of.birth"));
    addEntry(summary, MessageUtil.getMessage("statistics.number.of.students"));
    addEntry(summary, "Répartition des élèves entre amateurs et pros");
    addEntry(summary, "Liste des élèves en formation professionnelle");
    addEntry(summary, MessageUtil.getMessage("statistics.city.distribution"));
    addEntry(summary, "Nombre d'heures de répétition");
    addEntry(summary, "Nombre de répétiteurs");
    addEntry(summary, "Payeurs sans adresse");
    addEntry(summary, "Adhérents débiteurs");
    addEntry(summary, "Nombre d'adhérents");
    addEntry(summary, "Répartition des élèves en cours individuels");
    incId();
    addEntry(summary, "Répartition des élèves en cours collectifs");
    incId();
    addEntry(summary, "Répartition des adhérents par catégorie professionnelle");
    addEntry(summary, "Situation géographique des adhérents");
    addEntry(summary, "Nombre d'heures de cours (heures élèves loisir et pro)");
    addEntry(summary, "Nombre d'heures Loisir");
    addEntry(summary, "Nombre d'heures For Pro");
    addEntry(summary, "Nombre d'heures (élèves) de cours particuliers par instrument");
    incId();
    addEntry(summary, "Nombre d'heures (élèves) de cours collectifs par activité");
    incId();
    addEntry(summary, "Nombre de classes extérieur");
    addEntry(summary, "Nombre d'heures extérieur");
    addEntry(summary, "Nombre d'heures studio");
    addEntry(summary, MessageUtil.getMessage("statistics.hours.of.training"));
  }

  private void incId() {
    int nbEstab = estabList.size();
    if (nbEstab > 1) {
      navId += nbEstab;
    }
  }

  @Override
  protected String getQuery(String m) throws SQLException {
    if (m.equals("members_without_date_of_birth")
            || m.equals("total_number_of_students")
            || m.equals("list_pro_students")
            || m.equals("students_by_location")
            || m.equals("groups_with_rehearsal")
            || m.equals("members_with_rehearsal")
            || m.equals("hours_of_pro_lessons")
            || m.equals("hours_of_collective_pro_lessons")
            || m.equals("hours_of_private_pro_lessons")
            || m.equals("hours_teacher_of_collective_lessons")
            || m.equals("total_hours_of_studio")
            || m.equals("hours_of_studio_by_type")
            || m.equals("hours_of_training")) {
      return super.getQuery(m);
    }

    if (m.equals("payers_without_address")) {
      return "SELECT DISTINCT payeur FROM echeancier2"
              + " WHERE echeance >= '" + start + "' AND echeance <= '" + end + "'"
              + " AND echeancier2.montant = 1000"
              + " AND (compte = " + MEMBERSHIP_ACCOUNT + " OR compte = " + PRO_MEMBER_ACCOUNT + ")"
              + " AND payeur NOT IN (SELECT idper FROM adresse)";
    }
    if (m.equals("debtors")) {
      return "SELECT DISTINCT adherent, nom, prenom FROM echeancier2,personne"
              + " WHERE echeance BETWEEN '" + start + "' AND '" + end + "'"
              + " AND echeancier2.montant = 1000"
              + " AND (compte = " + MEMBERSHIP_ACCOUNT + " OR compte = " + PRO_MEMBER_ACCOUNT + ")"
              + " AND echeancier2.paye = false"
              + " AND echeancier2.adherent = personne.id";
    }
    if (m.equals("total_number_of_members")) {
      return "SELECT count(DISTINCT adherent) FROM echeancier2"
              + " WHERE echeance BETWEEN '" + start + "' AND '" + end + "'"
              + " AND echeancier2.montant = 1000"
              + " AND (compte = " + MEMBERSHIP_ACCOUNT + " OR compte = " + PRO_MEMBER_ACCOUNT + ")";
    }
    if (m.equals("number_of_men_members")) {
      return "SELECT count(DISTINCT adherent) FROM echeancier2, personne"
              + " WHERE personne.id = echeancier2.adherent"
              + " AND echeance BETWEEN '" + start + "' AND '" + end + "'"
              + " AND echeancier2.montant=1000"
              + " AND (compte = " + MEMBERSHIP_ACCOUNT + " OR compte = " + PRO_MEMBER_ACCOUNT + ")"
              + " AND (trim(personne.civilite) = 'M' OR personne.civilite = '')";
    }
    if (m.equals("number_of_women_members")) {
      return "SELECT count(DISTINCT adherent) FROM echeancier2, personne"
              + " WHERE personne.id = echeancier2.adherent"
              + " AND echeance BETWEEN '" + start + "' AND '" + end + "'"
              + " AND echeancier2.montant=1000"
              + " AND (compte = " + MEMBERSHIP_ACCOUNT + " OR compte = " + PRO_MEMBER_ACCOUNT + ")"
              + " AND (trim(personne.civilite) = 'Mme' OR personne.civilite = 'Mlle')";
    }

    if (m.equals("members_by_occupational")) {
      return "SELECT profession, count(DISTINCT adherent) FROM echeancier2,eleve"
              + " WHERE eleve.idper=echeancier2.adherent"
              + " AND echeance BETWEEN '" + start + "' AND '" + end + "'"
              + " AND montant = 1000"
              + " AND (compte  = " + MEMBERSHIP_ACCOUNT + " OR compte = " + PRO_MEMBER_ACCOUNT + ")"
              + " GROUP BY profession";
    }

    if (m.equals("members_by_location")) {
      return "SELECT adresse.ville, count(DISTINCT echeancier2.adherent) FROM echeancier2, adresse"
              + " WHERE echeancier2.echeance BETWEEN '" + start + "' AND '" + end + "'"
              + " AND echeancier2.montant = 1000"
              + " AND (echeancier2.compte = " + MEMBERSHIP_ACCOUNT + " OR echeancier2.compte = " + PRO_MEMBER_ACCOUNT + ")"
              + " AND (echeancier2.payeur = adresse.idper OR echeancier2.adherent = adresse.idper)"
              + " GROUP BY adresse.ville ORDER BY adresse.ville";
    }

    if (m.equals("number_of_external_classrooms")) {
      return "SELECT count(DISTINCT planning.lieux) FROM planning, salle"
              + " WHERE planning.jour >= '" + start + "' AND planning.jour < '" + end + "'"
              + " AND planning.lieux = salle.id"
              + " AND salle.etablissement <> 3501" // spécifique MUSTANG
              + " AND salle.etablissement <> 3502";
    }
    if (m.equals("external_hours")) {
      return "SELECT sum(planning.fin - planning.debut) FROM planning, salle"
              + " WHERE planning.jour >= '" + start + "' AND planning.jour <= '" + end + "'"
              + " AND planning.lieux = salle.id"
              + " AND salle.etablissement <> 3501"
              + " AND salle.etablissement <> 3502";
    }
    if (m.equals("hours_of_studio")) {
      return "SELECT sum(planning.fin - planning.debut) FROM planning"
              + " WHERE planning.jour >= '" + start + "' AND planning.jour <= '" + end + "'"
              + " AND planning.lieux = " + STUDIO;
    }
    return null;
  }

  @Override
  protected String getQuery(String m, Object a1, Object a2) {
    if ("number_of_amateurs".equals(m)
            || "number_of_pros".equals(m)
            || "students_by_instrument".equals(m)
            || "hours_of_rehearsal".equals(m)
            || "hours_of_lessons".equals(m)
            || "hours_of_teacher_lessons".equals(m)) {
      return super.getQuery(m, a1, a2);
    }

    if ("hours_of_private_lessons".equals(m)) {  // GENERIC
      String query = "SELECT sum(plage.fin-plage.debut) FROM planning, plage, action, cours, salle"
              + " WHERE plage.idplanning = planning.id"
              + " AND planning.jour >= '" + start + "' AND planning.jour <= '" + end + "'"
              + " AND plage.debut >= planning.debut AND plage.fin <= planning.fin"
              + " AND planning.ptype = " + Schedule.COURSE
              + " AND planning.action = action.id"
              + " AND action.cours = cours.id"
              + " AND cours.collectif =  'f'"
              + " AND planning.lieux = salle.id";

      if (a2 != null) { // par établissement
        query += " AND salle.etablissement = " + a2;
      }
      return query;
    }
    if ("hours_of_collective_lessons".equals(m)) {  // GENERIC
      String query = "SELECT sum(planning.fin-planning.debut) FROM planning, plage, action, cours, salle"
              + " WHERE plage.idplanning = planning.id"
              + " AND planning.jour >= '" + start + "' AND planning.jour <= '" + end + "'"
              + " AND plage.debut >= planning.debut AND plage.fin <= planning.fin"
              + " AND planning.ptype = " + Schedule.COURSE
              + " AND planning.action = action.id"
              + " AND action.cours = cours.id"
              + " AND cours.collectif =  't'"
              + " AND planning.lieux = salle.id";

      if (a2 != null) { // par établissement
        query += " AND salle.etablissement = " + a2;
      }
      return query;
    }
    if ("hours_of_private_lessons_by_activity".equals(m)) {  // GENERIC
      String query = "SELECT cours.titre, sum(plage.fin-plage.debut) FROM planning, plage, action, cours, salle"
              + " WHERE plage.idplanning = planning.id"
              + " AND planning.jour >= '" + start + "' AND planning.jour <= '" + end + "'"
              + " AND plage.debut >= planning.debut AND plage.fin <= planning.fin"
              + " AND planning.ptype = " + Schedule.COURSE
              + " AND planning.action = action.id"
              + " AND action.cours = cours.id"
              + " AND cours.collectif =  'f'"
              + " AND planning.lieux = salle.id";

      if (a2 != null) { // par établissement
        query += " AND salle.etablissement = " + a2;
      }
      query += " GROUP BY cours.titre ORDER BY cours.titre";
      return query;
    }

    if ("hours_of_collective_lessons_by_activity".equals(m)) {  // GENERIC
      String query = "SELECT cours.titre, sum(planning.fin-planning.debut) FROM planning, plage, action, cours, salle"
              + " WHERE plage.idplanning = planning.id"
              + " AND planning.jour >= '" + start + "' AND planning.jour <= '" + end + "'"
              + " AND plage.debut >= planning.debut AND plage.fin <= planning.fin"
              + " AND planning.ptype = " + Schedule.COURSE
              + " AND planning.action = action.id"
              + " AND action.cours = cours.id"
              + " AND cours.collectif =  't'"
              + " AND planning.lieux = salle.id";

      if (a2 != null) { // par établissement
        query += " AND salle.etablissement = " + a2;
      }
      query += " GROUP BY cours.titre ORDER BY cours.titre";

      return query;
    }
    return null;
  }

  public static void main(String[] args) throws SQLException {
    if (args.length != 1) {
      System.err.println(args.length + " error 1");
      System.exit(1);
    }
    String y = args[0].trim();
    if (y.length() != 4) {
      System.err.println("error 2");
      System.exit(2);
    }
    int year = Integer.parseInt(y);
    DataConnection dc = new DataConnection("localhost", 5434, "mustang", null);

    dc.connect();

//    DataCache cache = DataCache.getInstance(dc, System.getProperty("user.name"));
    DataCache cache = DataCache.getInstance(dc, "admin");
    cache.load(null);

    Statistics st = null;
    try {
      //st = StatisticsFactory.getStatistics(ConfigUtil.getConf(ConfigKey.ORGANIZATION_NAME.getKey(), dc), cache);
      st = StatisticsFactory.getInstance();
      if (st == null) {
        st = new StatisticsDefault();
      }
      st.init(cache);
      st.setConfig(new DateFr("01-09-" + year), new DateFr("31-08-" + (year + 1)));
//      st.setConfig(new DateFr("01-10-"+year), new DateFr("01-10-"+(year)));
      st.makeStats();
      System.out.println(MessageUtil.getMessage("statistics.completed", ""));
    } catch (IOException ex) {
      GemLogger.logException(ex);
    } catch (SQLException sqe) {
      GemLogger.logException(sqe);
    } finally {
      if (st != null) {
        st.close();
      }
    }
  }

}