package net.algem.planning.dispatch.ui;

import net.algem.contact.Person;
import net.algem.course.Course;
import net.algem.planning.Action;
import net.algem.planning.dispatch.model.ScheduleDispatch;
import net.algem.planning.dispatch.model.ScheduleDispatchService;
import net.algem.util.BundleUtil;
import net.algem.util.DataCache;
import net.algem.util.GemLogger;
import net.algem.util.model.Model;
import net.algem.util.module.GemDesktop;
import net.algem.util.ui.SQLErrorDlg;
import net.algem.util.ui.Toast;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Vector;

public class ScheduleDispatchController implements SubscriptionPatternDialog.OnSubscriptionPatternListener {
    private JLabel coursLabel;
    private JTable table1;
    private JButton okButton;
    private JPanel panel;
    private JScrollPane scrollPane;

    private final GemDesktop desktop;
    private final Action courseAction;
    private final ScheduleDispatchService scheduleDispatchService;
    private ScheduleDispatch scheduleDispatch;
    private final ScheduleDispatchTableModel dataModel;
    private JDialog dialog;

    public ScheduleDispatchController(GemDesktop desktop, Action courseAction) {
        this.desktop = desktop;
        this.courseAction = courseAction;
        this.scheduleDispatchService = desktop.getDataCache().getScheduleDispatchService();

        try {
            scheduleDispatch = scheduleDispatchService.loadScheduleDispatch(courseAction);
            Course course = (Course) DataCache.findId(courseAction.getCourse(), Model.Course);
            coursLabel.setText(course.getLabel());

            final JList<Person> rowHeader = new JList<>(new Vector(scheduleDispatch.getPersons()));
            rowHeader.addMouseListener(new MouseAdapter() {
                public void mousePressed(MouseEvent me) {
                    Point p = me.getPoint();
                    int row = rowHeader.locationToIndex(p);
                    if (me.getClickCount() == 2) {
                        Person person = scheduleDispatch.getPersons().get(row);
                        showSubscriptionPatternDialog(person);
                    }
                }
            });

            scrollPane.setRowHeaderView(rowHeader);

            table1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            dataModel = new ScheduleDispatchTableModel(scheduleDispatch);
            table1.setModel(dataModel);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }


        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                saveScheduleDispatch();
            }
        });
    }

    public void run() {
        dialog = new JDialog(desktop.getFrame());
        dialog.setTitle(BundleUtil.getLabel("ScheduleDispatch.label"));
        dialog.getContentPane().add(getPanel());
        dialog.pack();
        dialog.setLocationRelativeTo(desktop.getFrame());
        dialog.setVisible(true);
    }

    public void showSubscriptionPatternDialog(Person person) {
        SubscriptionPatternDialog dialog = new SubscriptionPatternDialog(this, person, scheduleDispatch.getSchedules());
        dialog.pack();
        dialog.setLocationRelativeTo(panel);
        dialog.setVisible(true);
    }

    @Override
    public void onSubscriptionPatternSelected(Person person, ScheduleDispatch.SubscriptionPattern pattern) {
        System.out.println(pattern);
        scheduleDispatch.subscribe(person, pattern);
        dataModel.fireTableDataChanged();
    }

    private void saveScheduleDispatch() {
        try {
            scheduleDispatchService.saveScheduleDispatch(courseAction, scheduleDispatch);
            Toast.showToast(desktop, "Affectations des planning enregistrÃ©es");
            dialog.dispose();
        } catch (Exception e) {
            GemLogger.logException(e);
            SQLErrorDlg.displayException(getPanel(), "Erreur", e);
        }
    }

    public JPanel getPanel() {
        return panel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 7, new Insets(8, 8, 8, 8), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Cours");
        panel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        coursLabel = new JLabel();
        coursLabel.setText("");
        panel.add(coursLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), null, null, 0, false));
        okButton = new JButton();
        okButton.setText("Ok");
        panel.add(okButton, new com.intellij.uiDesigner.core.GridConstraints(2, 5, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(2, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        scrollPane = new JScrollPane();
        panel.add(scrollPane, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 7, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        scrollPane.setViewportView(table1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }
}
